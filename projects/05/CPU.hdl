// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Determine if we have an A or C instruction
    DMux(in=true, sel=instruction[15], a=ainst, b=cinst);

    // If we're doing a C instruction, it is expected that the a register already
    // holds an _address_ of a memory value (not an actual value)
    Or(a=ainst, b=instruction[5], out=loada);
    Mux16(a=aluout, b=instruction, sel=ainst, out=aval);
    ARegister(in=aval, load=loada, out=aout);

    And(a=cinst, b=instruction[4], out=loadd);
    DRegister(in=aluout, load=loadd, out=dout);

    Mux16(a=aout, b=inM, sel=instruction[12], out=aorm);
    ALU(x=dout, y=aorm, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, zr=aluzr, ng=alung);

    Or16(a=aluout, out=outM);
    And(a=cinst, b=instruction[3], out=writeM);
    Or16(a=aout, out[0..14]=addressM);

    // look for jumps
    Not(in=aluzr, out=notzr);
    Not(in=alung, out=notng);
    And(a=notzr, b=notng, out=gt);
    Or(a=aluzr, b=gt, out=gte);
    And(a=aluzr, b=alung, out=lte);

    And(a=gt, b=instruction[0], out=jumpgt);
    And(a=aluzr, b=instruction[1], out=jumpzr);
    Or(a=jumpzr, b=jumpgt, out=jumpgte);
    And(a=alung, b=instruction[2], out=jumplt);
    Or(a=jumpzr, b=jumplt, out=jumplte);
    And(a=instruction[0], b=instruction[2], out=jumpnotzerotmp);
    And(a=jumpnotzerotmp, b=notzr, out=jumpnotzr);
    And(a=instruction[0], b=instruction[1], out=jumptmp);
    And(a=jumptmp, b=instruction[2], out=jump);

    Or8Way(in[0]=jumpgt, in[1]=jumpzr, in[2]=jumpgte, in[3]=jumplt, in[4]=jumpnotzr, in[5]=jumplte, in[6]=jump, out=hasjumpinst);
    And(a=hasjumpinst, b=cinst, out=shouldjump);

    PC(in=aout, load=shouldjump, inc=true, reset=reset, out[0..14]=pc);
}
